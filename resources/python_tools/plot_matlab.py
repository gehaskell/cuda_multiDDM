#!/usr/bin/python3

import argparse 
import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl
from pylab import cm
import scipy.optimize as opt 
import time
import string
import matplotlib.ticker as mticker




q1024 = np.array([float (x) for x in "0.00613592315154257	0.0122718463030851	0.0184077694546277	0.0245436926061703	0.0306796157577128	0.0368155389092554	0.0429514620607980	0.0490873852123405	0.0552233083638831	0.0613592315154257	0.0674951546669682	0.0736310778185108	0.0797670009700534	0.0859029241215959	0.0920388472731385	0.0981747704246810	0.104310693576224	0.110446616727766	0.116582539879309	0.122718463030851	0.128854386182394	0.134990309333936	0.141126232485479	0.147262155637022	0.153398078788564	0.159534001940107	0.165669925091649	0.171805848243192	0.177941771394734	0.184077694546277	0.190213617697820	0.196349540849362	0.202485464000905	0.208621387152447	0.214757310303990	0.220893233455532	0.227029156607075	0.233165079758617	0.239301002910160	0.245436926061703	0.251572849213245	0.257708772364788	0.263844695516330	0.269980618667873	0.276116541819415	0.282252464970958	0.288388388122501	0.294524311274043	0.300660234425586	0.306796157577128	0.312932080728671	0.319068003880213	0.325203927031756	0.331339850183299	0.337475773334841	0.343611696486384	0.349747619637926	0.355883542789469	0.362019465941011	0.368155389092554	0.374291312244096	0.380427235395639	0.386563158547182	0.392699081698724	0.398835004850267	0.404970928001809	0.411106851153352	0.417242774304894	0.423378697456437	0.429514620607980	0.435650543759522	0.441786466911065	0.447922390062607	0.454058313214150	0.460194236365692	0.466330159517235	0.472466082668778	0.478602005820320	0.484737928971863	0.490873852123405	0.497009775274948	0.503145698426490	0.509281621578033	0.515417544729576	0.521553467881118	0.527689391032661	0.533825314184203	0.539961237335746	0.546097160487288	0.552233083638831	0.558369006790373	0.564504929941916	0.570640853093459	0.576776776245001	0.582912699396544	0.589048622548086	0.595184545699629	0.601320468851171	0.607456392002714	0.613592315154257	0.619728238305799	0.625864161457342	0.632000084608884	0.638136007760427	0.644271930911969	0.650407854063512	0.656543777215054	0.662679700366597	0.668815623518140	0.674951546669682	0.681087469821225	0.687223392972767	0.693359316124310	0.699495239275852	0.705631162427395	0.711767085578938	0.717903008730480	0.724038931882023	0.730174855033565	0.736310778185108	0.742446701336650	0.748582624488193	0.754718547639735	0.760854470791278	0.766990393942821	0.773126317094363	0.779262240245906	0.785398163397448	0.791534086548991	0.797670009700533	0.803805932852076	0.809941856003619	0.816077779155161	0.822213702306704	0.828349625458246	0.834485548609789	0.840621471761331	0.846757394912874	0.852893318064417	0.859029241215959	0.865165164367502	0.871301087519044	0.877437010670587	0.883572933822129	0.889708856973672	0.895844780125214	0.901980703276757	0.908116626428300	0.914252549579842	0.920388472731385	0.926524395882927	0.932660319034470	0.938796242186012	0.944932165337555	0.951068088489098	0.957204011640640	0.963339934792183	0.969475857943725	0.975611781095268	0.981747704246810	0.987883627398353	0.994019550549895	1.00015547370144	1.00629139685298	1.01242732000452	1.01856324315607	1.02469916630761	1.03083508945915	1.03697101261069	1.04310693576224	1.04924285891378	1.05537878206532	1.06151470521686	1.06765062836841	1.07378655151995	1.07992247467149	1.08605839782303	1.09219432097458	1.09833024412612	1.10446616727766	1.11060209042920	1.11673801358075	1.12287393673229	1.12900985988383	1.13514578303537	1.14128170618692	1.14741762933846	1.15355355249000	1.15968947564154	1.16582539879309	1.17196132194463	1.17809724509617	1.18423316824772	1.19036909139926	1.19650501455080	1.20264093770234	1.20877686085389	1.21491278400543	1.22104870715697	1.22718463030851	1.23332055346006	1.23945647661160	1.24559239976314	1.25172832291468	1.25786424606623	1.26400016921777	1.27013609236931	1.27627201552085	1.28240793867240	1.28854386182394	1.29467978497548	1.30081570812702	1.30695163127857	1.31308755443011	1.31922347758165	1.32535940073319	1.33149532388474	1.33763124703628	1.34376717018782	1.34990309333936	1.35603901649091	1.36217493964245	1.36831086279399	1.37444678594553	1.38058270909708	1.38671863224862	1.39285455540016	1.39899047855170	1.40512640170325	1.41126232485479	1.41739824800633	1.42353417115788	1.42967009430942	1.43580601746096	1.44194194061250	1.44807786376405	1.45421378691559	1.46034971006713	1.46648563321867	1.47262155637022	1.47875747952176	1.48489340267330	1.49102932582484	1.49716524897639	1.50330117212793	1.50943709527947	1.51557301843101	1.52170894158256	1.52784486473410	1.53398078788564	1.54011671103718	1.54625263418873	1.55238855734027	1.55852448049181	1.56466040364335	1.57079632679490".split()])
q512 = np.array([float(x) for x in "0.0122718463030851	0.0245436926061703	0.0368155389092554	0.0490873852123405	0.0613592315154257	0.0736310778185108	0.0859029241215959	0.0981747704246810	0.110446616727766	0.122718463030851	0.134990309333936	0.147262155637022	0.159534001940107	0.171805848243192	0.184077694546277	0.196349540849362	0.208621387152447	0.220893233455532	0.233165079758617	0.245436926061703	0.257708772364788	0.269980618667873	0.282252464970958	0.294524311274043	0.306796157577128	0.319068003880213	0.331339850183299	0.343611696486384	0.355883542789469	0.368155389092554	0.380427235395639	0.392699081698724	0.404970928001809	0.417242774304894	0.429514620607980	0.441786466911065	0.454058313214150	0.466330159517235	0.478602005820320	0.490873852123405	0.503145698426490	0.515417544729576	0.527689391032661	0.539961237335746	0.552233083638831	0.564504929941916	0.576776776245001	0.589048622548086	0.601320468851171	0.613592315154257	0.625864161457342	0.638136007760427	0.650407854063512	0.662679700366597	0.674951546669682	0.687223392972767	0.699495239275852	0.711767085578938	0.724038931882023	0.736310778185108	0.748582624488193	0.760854470791278	0.773126317094363	0.785398163397448	0.797670009700533	0.809941856003619	0.822213702306704	0.834485548609789	0.846757394912874	0.859029241215959	0.871301087519044	0.883572933822129	0.895844780125214	0.908116626428300	0.920388472731385	0.932660319034470	0.944932165337555	0.957204011640640	0.969475857943725	0.981747704246810	0.994019550549895	1.00629139685298	1.01856324315607	1.03083508945915	1.04310693576224	1.05537878206532	1.06765062836841	1.07992247467149	1.09219432097458	1.10446616727766	1.11673801358075	1.12900985988383	1.14128170618692	1.15355355249000	1.16582539879309	1.17809724509617	1.19036909139926	1.20264093770234	1.21491278400543	1.22718463030851	1.23945647661160	1.25172832291468	1.26400016921777	1.27627201552085	1.28854386182394	1.30081570812702	1.31308755443011	1.32535940073319	1.33763124703628	1.34990309333936	1.36217493964245	1.37444678594553	1.38671863224862	1.39899047855170	1.41126232485479	1.42353417115788	1.43580601746096	1.44807786376405	1.46034971006713	1.47262155637022	1.48489340267330	1.49716524897639	1.50943709527947	1.52170894158256	1.53398078788564	1.54625263418873	1.55852448049181	1.57079632679490".split()])
q256 = np.array([float(x) for x in "0.0245436926061703	0.0490873852123405	0.0736310778185108	0.0981747704246810	0.122718463030851	0.147262155637022	0.171805848243192	0.196349540849362	0.220893233455532	0.245436926061703	0.269980618667873	0.294524311274043	0.319068003880213	0.343611696486384	0.368155389092554	0.392699081698724	0.417242774304894	0.441786466911065	0.466330159517235	0.490873852123405	0.515417544729576	0.539961237335746	0.564504929941916	0.589048622548086	0.613592315154257	0.638136007760427	0.662679700366597	0.687223392972767	0.711767085578938	0.736310778185108	0.760854470791278	0.785398163397448	0.809941856003619	0.834485548609789	0.859029241215959	0.883572933822129	0.908116626428300	0.932660319034470	0.957204011640640	0.981747704246810	1.00629139685298	1.03083508945915	1.05537878206532	1.07992247467149	1.10446616727766	1.12900985988383	1.15355355249000	1.17809724509617	1.20264093770234	1.22718463030851	1.25172832291468	1.27627201552085	1.30081570812702	1.32535940073319	1.34990309333936	1.37444678594553	1.39899047855170	1.42353417115788	1.44807786376405	1.47262155637022	1.49716524897639	1.52170894158256	1.54625263418873	1.57079632679490".split()])

qs = [q1024, q512, q256]

t1024 = np.array([float(x) for x in "NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	90.6518862342037	NaN	NaN	NaN	94.5824508286086	105.744691451026	NaN	104.433084042508	92.0841422747520	NaN	102.500258159248	NaN	NaN	110.232133621471	104.621543460958	92.0208915499080	NaN	NaN	91.4947972719239	107.191649491181	107.595580857088	103.072916332043	100.784070726940	101.814922614414	103.706819877144	101.002598127986	NaN	105.439115191395	113.623298849540	107.960615355876	111.664159032150	99.8906165405284	NaN	NaN	NaN	NaN	NaN	113.058287703717	97.2455792907771	NaN	NaN	114.245336532496	96.2335686853943	NaN	NaN	99.8801282953125	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	103.430572430562	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN".split()])
t512 = np.array([float(x) for x in "NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	45.5424824209338	NaN	49.7905419340506	50.7044189425943	45.7209794091717	50.0313739818457	48.9463230548679	46.2992831144055	47.3490086095939	50.6056474304272	52.0683216861251	53.4732937195458	52.3735512947161	59.2020906059455	53.2074142328132	62.9065511280357	54.0513158577209	67.4714438964528	65.1709004429007	66.2126914902886	72.2136466758347	67.1250713140745	65.9780103301820	75.2296946558537	61.5118705963570	77.3394030554758	72.1500208773467	91.6774972556406	82.9558529933597	82.9332192746032	83.2909742270145	71.3540163263062	68.9078635896706	85.3143127980063	103.695411510036	83.7301491339058	105.556285537100	109.603228684436	119.977296278646	92.1265583827189	132.589149767872	91.2626039527837	89.8821800777877	111.074532685935	96.8299653108815	123.863313569795	133.230625211626	135.532010521460	138.824876495858	161.844277437670	219.432461711734	NaN	188.597953385424	162.106572306799	119.519713106368	154.624426069858	191.220992504782	156.506424569455	137.710591258655	142.794031249593	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN".split()])
t256 = np.array([float(x) for x in "NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	13.8855952230386	14.1460980805989	15.1900375875505	17.1550509473329	21.8842762888734	20.5124810786675	26.0358927877854	26.0940971028254	30.1704412381169	32.8064953708121	34.1965481174159	36.9376047543686	42.0655516997801	45.1950701968957	48.2097747990268	57.3938100781654	62.8125797077964	66.6066880452608	66.7587305993640	77.6673981615450	95.6932090293751	103.233663324048	124.455357472814	149.135996379014	145.774923834511	151.659753661652	158.580741838047	149.373006241798	179.124429922937	181.996790018826	141.602467162429	179.713807536569	186.192535346688	180.365043810179	200.708847643028	153.245423628063	152.310422849962	184.188253110866	159.941156006633	137.040173139489	129.993612399261	159.762776475889	122.894036123740	69.8771794827345	89.2754472874736	60.0999675560707	60.7474373078933".split()])

ts = [t1024, t512, t256]

def fit_func(x, F, A, B):
    return A * (1 - np.exp( - x  * F, where=(- x  * F < 700))) + B


# Fits Brownian approximation to the ISF of the form:
# A (1 - exp(- tau * F)) + B 
# A, B are fitting parameters and not of interest, t is the
# characteristic decay time and will be used to find the 
# diffusion coefficient.
def fit_ISF(ISF, q_vector, tau_vector):
    out_params = []
    out_errs   = []

    for q_idx in range(len(q_vector)):

        ISF_q = ISF[q_idx]

        # try:
        popt, pcov = opt.curve_fit(fit_func, tau_vector, ISF_q, p0=[6, 3e-2, 4e-3])
        # except:
            # print(f"Fitting ISF failed for q_idx: {q_idx} [using default values of 1].")
            # popt = [1, 1, 1]
            # pcov = [(1,1,1), (1,1,1), (1,1,1)]

        # perr = np.sqrt(np.diag(pcov)) # find 1 standard deviation from covariances

        stds = np.sqrt(np.diag(pcov))
        stds[2] = stds[2] / (popt[2]**2)
        # popt[2] = 1.0 / popt[2]

        stds[np.isinf(stds)] = 0

        out_params.append(popt)
        out_errs.append(stds)

    return np.array(out_params), np.array(out_errs)

def plot_diff_coeff(ax, q_vector, ts):
    Fs = np.reciprocal(ts)

    # F must be greator than zero
    Fs_tmp = []
    q_vector_tmp = []


    for i, F in enumerate(Fs):
        if F!=np.inf and F!=float("NaN") and F >= 0:
            q_vector_tmp.append(q_vector[i])
            Fs_tmp.append(F)
        else:
            print("Unexpected positive F value (removed).")
    
    Fs = Fs_tmp
    q_vector = q_vector_tmp

    # From theory we have lnF = ln(D q^2) = ln(D) + 2lnq
    grad2line = lambda x, c: 2 * x + c


    lnFs = np.log(Fs)
    lnqs  = np.log(q_vector)

    popt, pcov = opt.curve_fit(grad2line, xdata=lnqs, ydata=lnFs)

    perr = np.sqrt(np.diag(pcov))

    lnD = popt[0]
    lnD_err = perr[0]

    D = np.exp(lnD)
    D_err = lnD_err * D

    ax.scatter(q_vector, np.reciprocal(Fs), marker='+', color="black")
    ax.plot(q_vector, np.power(q_vector, -2) * np.exp(-lnD), "-k", alpha=0.2,)

    
    txt = "Stokes-Einstein diffusion coefficient, D = {:.6f} +- {:.6f}".format(D, D_err) + "\tum^2 / s"
    print(txt)

    ax.set_yscale('log')
    ax.set_xscale('log')

    ax.xaxis.set_minor_formatter(mticker.FormatStrFormatter('%.0f'))
    ax.xaxis.set_major_formatter(mticker.FormatStrFormatter('%.0f'))
    ax.yaxis.set_major_formatter(mticker.FormatStrFormatter('%.1f'))

    #ax.set_title(r"Charateristic decay time $\tau_c$ versus the wave-vector q.")
    #ax.legend(loc="upper right")

    ax.set(xlabel=r"Wavevector, q [$\mu m^{-1}]$")
    ax.set(ylabel=r"Decay time, $\tau_c$ [s]")

    # ax.set_aspect("equal")
    ax.xaxis.set_tick_params(which='major', direction='in')
    ax.xaxis.set_tick_params(which='minor',  direction='in')
    ax.yaxis.set_tick_params(which='major',  direction='in')
    ax.yaxis.set_tick_params(which='minor', direction='in')
    # ax.yaxis.labelpad = 4

def plot_ISF(ax, ISF, tau_vector, q_vector, params, plot_arrow=False, max_qi=12):
    ax.xaxis.set_major_locator(plt.MaxNLocator(5))

    q_count = len(q_vector)
    colors = cm.get_cmap("tab10", q_count)

    # ax.set_aspect("equal")
    ax.xaxis.set_tick_params(which='major', direction='in')
    ax.xaxis.set_tick_params(which='minor',  direction='in')
    ax.yaxis.set_tick_params(which='major',  direction='in')
    ax.yaxis.set_tick_params(which='minor', direction='in')
    ax.set_yticklabels([])

    for qidx, q_val in enumerate(q_vector):
        if (qidx >= max_qi):
            break
        
        tmp_label = f"q = {q_val} " + "$\mu m^{-1}$"

        ax.scatter(tau_vector, ISF[qidx], label=tmp_label, color=colors(qidx), marker="o", s=20, alpha=.95)
        
        # tau_fit = np.linspace(min(tau_vector), max(tau_vector))
        # fits = fit_func(tau_fit, params[qidx][0], params[qidx][1], params[qidx][2])
        # ax.plot(tau_fit, fits)

        ax.set(xlabel=r"Lag time $\tau$ [s]", ylabel=r"I(q, $\tau$) [a. u.]")

    if plot_arrow:
        print("Plot arrow")
        ax.annotate("q",
            xy=(0.5, 0.001), xycoords='data',
            xytext=(0.1, 0.006), textcoords='data',
            arrowprops=dict(arrowstyle="->",
                            connectionstyle="arc3"),
            )

            # plot_all_axes = True
            # if(plot_all_axes):
            #     ax_isf.set(xlabel=r"Lag time $\tau$ [s]", ylabel=r"I(q, $\tau$) [a. u.]")
            # else:
            #     ax_isf.get_xaxis().set_visible(False)
            #     ax_isf.get_yaxis().set_visible(False)


if __name__ == "__main__":

   # Plotting Info
    plt.rcParams['font.size'] = 14
    mpl.rcParams['mathtext.fontset'] = 'stix'
    mpl.rcParams['font.family'] = 'STIXGeneral'

    # separate plot for each scale
    for qi, q_vector in enumerate(qs):
        # if (qi != 2):
        #     continue

        q_vector = q_vector /  0.09700

        tau_vector = np.reciprocal(ts[qi])
        if qi == 0:
            cutoff = 250
            q_vector = q_vector[:cutoff]
            tau_vector = tau_vector[:cutoff]

        if qi == 1:
            cutoff = 70
            q_vector = q_vector[60:cutoff]
            tau_vector = tau_vector[60:cutoff]


        if qi == 2:
            cutoff = 53
            q_vector = q_vector[20:cutoff]
            tau_vector = tau_vector[20:cutoff]



        tau_count = len(tau_vector)

        # Plot axes
        ax_ISF = plt.subplot(4, 2 , 2*(qi+1) - 1)
        ax_D   = plt.subplot(4, 2 , 2*(qi+1))

        # Fit ISF with exponentials [Params (F, A, B)]

        # Find diff coeff and plot graph
        plot_diff_coeff(ax_D, q_vector, tau_vector)


    plt.subplots_adjust(hspace=0.3, wspace=0.3)
    plt.show()
    
